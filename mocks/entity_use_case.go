// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/evrone/go-service-template/internal/business-logic/domain"
	mock "github.com/stretchr/testify/mock"
)

// EntityUseCase is an autogenerated mock type for the EntityUseCase type
type EntityUseCase struct {
	mock.Mock
}

// DoTranslate provides a mock function with given fields: entity
func (_m *EntityUseCase) DoTranslate(entity domain.Entity) (domain.Entity, error) {
	ret := _m.Called(entity)

	var r0 domain.Entity
	if rf, ok := ret.Get(0).(func(domain.Entity) domain.Entity); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(domain.Entity)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Entity) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// History provides a mock function with given fields:
func (_m *EntityUseCase) History() ([]domain.Entity, error) {
	ret := _m.Called()

	var r0 []domain.Entity
	if rf, ok := ret.Get(0).(func() []domain.Entity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Entity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
